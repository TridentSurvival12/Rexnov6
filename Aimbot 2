local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- CONFIG
local FOVRadius = 100
local AimPart = "Head"
_G.ffa = True -- Set to true for Free For All mode

-- STATE
local Holding = false

-- FOV Circle Drawing
local FOVCircle = Drawing.new("Circle")
FOVCircle.Thickness = 2
FOVCircle.Filled = false
FOVCircle.Color = Color3.new(1, 1, 1)
FOVCircle.Transparency = 1
FOVCircle.Radius = FOVRadius
FOVCircle.Visible = true

-- Get Closest Valid Target
local function GetClosestTarget()
	local closestPlayer = nil
	local lowestDistance = math.huge
	local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

	for _, player in ipairs(Players:GetPlayers()) do
		local character = player.Character
		if
			player ~= LocalPlayer
			and character
			and character:FindFirstChild(AimPart)
			and character:FindFirstChild("Humanoid")
			and character.Humanoid.Health > 0
			and (_G.ffa or player.Team ~= LocalPlayer.Team)
		then
			local part = character[AimPart]
			local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
			local screenDist = (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).Magnitude
			local worldDist = (Camera.CFrame.Position - part.Position).Magnitude

			if onScreen and screenDist < FOVRadius then
				if worldDist < lowestDistance then
					lowestDistance = worldDist
					closestPlayer = player
				end
			end
		end
	end

	return closestPlayer
end

-- Lock-On Loop
RunService.RenderStepped:Connect(function()
	local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
	FOVCircle.Position = screenCenter

	if Holding then
		local target = GetClosestTarget()
		if
			target
			and target.Character
			and target.Character:FindFirstChild(AimPart)
			and target.Character:FindFirstChild("Humanoid")
			and target.Character.Humanoid.Health > 0
		then
			local part = target.Character[AimPart]
			local direction = (part.Position - Camera.CFrame.Position).Unit
			local newCFrame = CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + direction)

			Camera.CFrame = newCFrame
		end
	end
end)

-- Input Toggle
UserInputService.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton2 then
		Holding = true
	end
end)

UserInputService.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton2 then
		Holding = false
	end
end)
